// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

var $$class = CamlinternalOO.create_table(0);

var $$class$1 = CamlinternalOO.create_table(0);

var $$class$2 = CamlinternalOO.create_table(0);

({
    type: "graph",
    graph: {
      attrs: (CamlinternalOO.init_class($$class), CamlinternalOO.create_object_opt(0, $$class)),
      coords: {
        corner: {
          attrs: (CamlinternalOO.init_class($$class$1), CamlinternalOO.create_object_opt(0, $$class$1)),
          data: /* :: */[
            0,
            /* :: */[
              1,
              /* :: */[
                2,
                /* :: */[
                  3,
                  /* [] */0
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "corner",
            /* [] */0
          ]
        },
        node: {
          attrs: (CamlinternalOO.init_class($$class$2), CamlinternalOO.create_object_opt(0, $$class$2)),
          data: /* :: */[
            0,
            /* :: */[
              1,
              /* :: */[
                2,
                /* :: */[
                  3,
                  /* :: */[
                    4,
                    /* :: */[
                      5,
                      /* :: */[
                        6,
                        /* :: */[
                          7,
                          /* :: */[
                            8,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "node",
            /* [] */0
          ]
        }
      },
      data_vars: {
        corners_at_face: {
          attrs: {
            cf_role: "edge_node_connectivity",
            long_name: "nodes a link tail and head",
            start_index: 0
          },
          data: /* :: */[
            /* :: */[
              0,
              /* :: */[
                1,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                0,
                /* :: */[
                  2,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  1,
                  /* :: */[
                    3,
                    /* [] */0
                  ]
                ],
                /* :: */[
                  /* :: */[
                    2,
                    /* :: */[
                      3,
                      /* [] */0
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "face",
            /* :: */[
              "Two",
              /* [] */0
            ]
          ]
        },
        dual: {
          attrs: {
            cf_role: "mesh_topology",
            edge_dimension: "link",
            edge_node_connectivity: "nodes_at_link",
            face_dimension: "patch",
            face_edge_connectivity: "links_at_patch",
            face_node_connectivity: "nodes_at_patch",
            long_name: "Topology data of 2D unstructured mesh",
            node_coordinates: "x_of_node y_of_node",
            topology_dimension: 2
          },
          data: "a",
          dims: /* [] */0
        },
        faces_at_cell: {
          attrs: {
            cf_role: "face_edge_connectivity",
            long_name: "Maps every face to its edges",
            start_index: 0
          },
          data: /* :: */[
            /* :: */[
              2,
              /* :: */[
                3,
                /* :: */[
                  1,
                  /* :: */[
                    0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* [] */0
          ],
          dims: /* :: */[
            "cell",
            /* :: */[
              "max_cell_faces",
              /* [] */0
            ]
          ]
        },
        links_at_patch: {
          attrs: {
            cf_role: "face_edge_connectivity",
            long_name: "Maps every face to its edges",
            start_index: 0
          },
          data: /* :: */[
            /* :: */[
              3,
              /* :: */[
                5,
                /* :: */[
                  2,
                  /* :: */[
                    0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                4,
                /* :: */[
                  6,
                  /* :: */[
                    3,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  8,
                  /* :: */[
                    10,
                    /* :: */[
                      7,
                      /* :: */[
                        5,
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    9,
                    /* :: */[
                      11,
                      /* :: */[
                        8,
                        /* :: */[
                          6,
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "patch",
            /* :: */[
              "max_patch_links",
              /* [] */0
            ]
          ]
        },
        mesh: {
          attrs: {
            cf_role: "mesh_topology",
            edge_dimension: "link",
            edge_node_connectivity: "nodes_at_link",
            face_dimension: "patch",
            face_edge_connectivity: "links_at_patch",
            face_node_connectivity: "nodes_at_patch",
            long_name: "Topology data of 2D unstructured mesh",
            node_coordinates: "x_of_node y_of_node",
            topology_dimension: 2
          },
          data: "a",
          dims: /* [] */0
        },
        node_at_cell: {
          attrs: {
            cf_role: "cell_node_connectivity",
            long_name: "nodes centered at cells",
            start_index: 0
          },
          data: /* :: */[
            4,
            /* [] */0
          ],
          dims: /* :: */[
            "cell",
            /* [] */0
          ]
        },
        nodes_at_face: {
          attrs: {
            cf_role: "face_node_connectivity",
            long_name: "nodes on either side of a face",
            start_index: 0
          },
          data: /* :: */[
            /* :: */[
              1,
              /* :: */[
                4,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                3,
                /* :: */[
                  4,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  4,
                  /* :: */[
                    5,
                    /* [] */0
                  ]
                ],
                /* :: */[
                  /* :: */[
                    4,
                    /* :: */[
                      7,
                      /* [] */0
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "face",
            /* :: */[
              "Two",
              /* [] */0
            ]
          ]
        },
        nodes_at_link: {
          attrs: {
            cf_role: "edge_node_connectivity",
            long_name: "nodes a link tail and head",
            start_index: 0
          },
          data: /* :: */[
            /* :: */[
              0,
              /* :: */[
                1,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                1,
                /* :: */[
                  2,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  0,
                  /* :: */[
                    3,
                    /* [] */0
                  ]
                ],
                /* :: */[
                  /* :: */[
                    1,
                    /* :: */[
                      4,
                      /* [] */0
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      2,
                      /* :: */[
                        5,
                        /* [] */0
                      ]
                    ],
                    /* :: */[
                      /* :: */[
                        3,
                        /* :: */[
                          4,
                          /* [] */0
                        ]
                      ],
                      /* :: */[
                        /* :: */[
                          4,
                          /* :: */[
                            5,
                            /* [] */0
                          ]
                        ],
                        /* :: */[
                          /* :: */[
                            3,
                            /* :: */[
                              6,
                              /* [] */0
                            ]
                          ],
                          /* :: */[
                            /* :: */[
                              4,
                              /* :: */[
                                7,
                                /* [] */0
                              ]
                            ],
                            /* :: */[
                              /* :: */[
                                5,
                                /* :: */[
                                  8,
                                  /* [] */0
                                ]
                              ],
                              /* :: */[
                                /* :: */[
                                  6,
                                  /* :: */[
                                    7,
                                    /* [] */0
                                  ]
                                ],
                                /* :: */[
                                  /* :: */[
                                    7,
                                    /* :: */[
                                      8,
                                      /* [] */0
                                    ]
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "link",
            /* :: */[
              "Two",
              /* [] */0
            ]
          ]
        },
        x_of_corner: {
          attrs: {
            long_name: "x",
            units: "m"
          },
          data: /* :: */[
            0.5,
            /* :: */[
              1.5,
              /* :: */[
                0.5,
                /* :: */[
                  1.5,
                  /* [] */0
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "corner",
            /* [] */0
          ]
        },
        x_of_node: {
          attrs: {
            long_name: "x",
            units: "m"
          },
          data: /* :: */[
            0,
            /* :: */[
              1,
              /* :: */[
                2,
                /* :: */[
                  0,
                  /* :: */[
                    1,
                    /* :: */[
                      2,
                      /* :: */[
                        0,
                        /* :: */[
                          1,
                          /* :: */[
                            2,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "node",
            /* [] */0
          ]
        },
        y_of_corner: {
          attrs: {
            long_name: "y",
            units: "m"
          },
          data: /* :: */[
            0.5,
            /* :: */[
              0.5,
              /* :: */[
                1.5,
                /* :: */[
                  1.5,
                  /* [] */0
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "corner",
            /* [] */0
          ]
        },
        y_of_node: {
          attrs: {
            long_name: "y",
            units: "m"
          },
          data: /* :: */[
            0,
            /* :: */[
              0,
              /* :: */[
                0,
                /* :: */[
                  1,
                  /* :: */[
                    1,
                    /* :: */[
                      1,
                      /* :: */[
                        2,
                        /* :: */[
                          2,
                          /* :: */[
                            2,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          dims: /* :: */[
            "node",
            /* [] */0
          ]
        }
      },
      dims: {
        Two: 2,
        cell: 1,
        corner: 4,
        face: 4,
        link: 12,
        max_cell_faces: 4,
        max_patch_links: 4,
        node: 9,
        patch: 4
      }
    },
    href: "/graphs/raster?shape=3%2C3&spacing=1.0%2C1.0&origin=0.0%2C0.0",
    repr: "DualUniformRectilinearGraph((3, 3), spacing=(1.0, 1.0), origin=(0.0, 0.0))"
  });

function App(Props) {
  var greeting = Props.greeting;
  var match = React.useReducer((function (state, action) {
          if (action) {
            return /* record */[
                    /* count */state[/* count */0],
                    /* show */!state[/* show */1]
                  ];
          } else {
            return /* record */[
                    /* count */state[/* count */0] + 1 | 0,
                    /* show */state[/* show */1]
                  ];
          }
        }), /* record */[
        /* count */0,
        /* show */true
      ]);
  var dispatch = match[1];
  var state = match[0];
  var message = "You've clicked this " + (String(state[/* count */0]) + " times(s)");
  var match$1 = state[/* show */1];
  return React.createElement("div", undefined, React.createElement("button", {
                  onClick: (function (_event) {
                      return Curry._1(dispatch, /* Click */0);
                    })
                }, message), React.createElement("button", {
                  onClick: (function (_event) {
                      return Curry._1(dispatch, /* Toggle */1);
                    })
                }, "Toggle greeting"), match$1 ? greeting : null);
}

var make = App;

exports.make = make;
/*  Not a pure module */
